(()=>{"use strict";var n={769:(n,e,t)=>{t.d(e,{Z:()=>a});var r=t(15),o=t.n(r),i=t(645),A=t.n(i)()(o());A.push([n.id,'body{background:#252525}#main-wrapper{display:flex;justify-content:center}#machine-container{width:420px;border:14px solid #795548;padding:20px}.enigma-logo{position:relative;float:right;top:5px}.enigma-logo img{width:120px}#enigma-output{display:none;display:flex;justify-content:flex-end;margin-right:5px}#enigma-output-text{background:#fff;padding:5px;margin-bottom:10px;margin-left:10px;min-width:10px;font-family:"Courier New",monospace;overflow-x:auto;text-overflow:unset}#rotors{margin-left:15px;margin-bottom:20px}.rotor{display:inline-block;margin-right:15px}.rotor-window{display:inline-block;background:gray;color:#fff;border:2px silver solid;padding:8px;width:11px;height:20px;text-align:center;box-shadow:inset 0px 18px 6px -12px #191919,inset 0px -18px 6px -12px #191919}.rotor-knob{display:inline-block;position:relative;top:11px}.rotor-knob-button{height:21px}.lampboard-letter{border-radius:20px;padding:3px;width:30px;height:30px;margin:6px;background:#000;color:#fff;border-color:#fff;border-width:0px;border-image:none;border-style:solid;color:gray}.lampboard-letter.active{color:#fc0;text-shadow:#fc0 2px 0px 3px}.lampboard-letter:focus{outline:none}#lampboard-row-1{margin-left:10px}#lampboard-row-2{margin-left:26px}#lampboard{margin-bottom:20px}.keyboard-button:active{top:3px;left:2px;position:relative}.keyboard-button:focus{outline:none}.keyboard-button{border-radius:20px;padding:3px;width:32px;height:32px;margin:5px;background:#000;color:#fff;border-color:#fff;border-width:2px;box-shadow:4px -2px 1px 0 rgba(0,0,0,.2),0 6px 20px 0 rgba(0,0,0,.19) !important;border-image:none;border-style:solid}.keyboard-row{border-top:2px solid #000;padding-top:5px;padding-bottom:5px}#keyboard-row-1{padding-left:10px}#keyboard-row-2{padding-left:26px}',"",{version:3,sources:["webpack://./src/enigma.scss"],names:[],mappings:"AAAA,KACE,kBAAA,CAGF,cACE,YAAA,CACA,sBAAA,CAGF,mBACE,WAAA,CACA,yBAAA,CACA,YAAA,CAGF,aACE,iBAAA,CACA,WAAA,CACA,OAAA,CAEA,iBACE,WAAA,CAIJ,eACE,YAAA,CACA,YAAA,CACA,wBAAA,CACA,gBAAA,CAGF,oBACE,eAAA,CACA,WAAA,CACA,kBAAA,CACA,gBAAA,CACA,cAAA,CACA,mCAAA,CACA,eAAA,CACA,mBAAA,CAGF,QACE,gBAAA,CACA,kBAAA,CAGF,OACE,oBAAA,CACA,iBAAA,CAGF,cACE,oBAAA,CACA,eAAA,CACA,UAAA,CACA,uBAAA,CACA,WAAA,CACA,UAAA,CACA,WAAA,CACA,iBAAA,CACA,6EAAA,CAGF,YACE,oBAAA,CACA,iBAAA,CACA,QAAA,CAGF,mBACE,WAAA,CAGF,kBACE,kBAAA,CACA,WAAA,CACA,UAAA,CACA,WAAA,CACA,UAAA,CACA,eAAA,CACA,UAAA,CACA,iBAAA,CACA,gBAAA,CACA,iBAAA,CACA,kBAAA,CACA,UAAA,CAGF,yBACE,UAAA,CACA,4BAAA,CAGF,wBACE,YAAA,CAGF,iBACE,gBAAA,CAGF,iBACE,gBAAA,CAGF,WACE,kBAAA,CAGF,wBACE,OAAA,CACA,QAAA,CACA,iBAAA,CAGF,uBACE,YAAA,CAGF,iBACE,kBAAA,CACA,WAAA,CACA,UAAA,CACA,WAAA,CACA,UAAA,CACA,eAAA,CACA,UAAA,CACA,iBAAA,CACA,gBAAA,CACA,gFAAA,CACA,iBAAA,CACA,kBAAA,CAGF,cACE,yBAAA,CACA,eAAA,CACA,kBAAA,CAGF,gBACE,iBAAA,CAGF,gBACE,iBAAA",sourcesContent:['body {\n  background: rgb(37 37 37);\n}\n\n#main-wrapper {\n  display: flex;\n  justify-content: center;\n}\n\n#machine-container {\n  width: 420px;\n  border: 14px solid #795548;\n  padding: 20px;\n}\n\n.enigma-logo {\n  position: relative;\n  float: right;\n  top: 5px;\n\n  img {\n    width: 120px;\n  }\n}\n\n#enigma-output {\n  display: none;\n  display: flex;\n  justify-content: flex-end;\n  margin-right: 5px;\n}\n\n#enigma-output-text {\n  background: white;\n  padding: 5px;\n  margin-bottom: 10px;\n  margin-left: 10px;\n  min-width: 10px;\n  font-family: "Courier New", monospace;\n  overflow-x: auto;\n  text-overflow: unset;\n}\n\n#rotors {\n  margin-left: 15px;\n  margin-bottom: 20px;\n}\n\n.rotor {\n  display: inline-block;\n  margin-right: 15px;\n}\n\n.rotor-window {\n  display: inline-block;\n  background: #808080;\n  color: white;\n  border: 2px silver solid;\n  padding: 8px;\n  width: 11px;\n  height: 20px;\n  text-align: center;\n  box-shadow: inset 0px 18px 6px -12px #191919, inset 0px -18px 6px -12px #191919;\n}\n\n.rotor-knob {\n  display: inline-block;\n  position: relative;\n  top: 11px;\n}\n\n.rotor-knob-button {\n  height: 21px;\n}\n\n.lampboard-letter {\n  border-radius: 20px;\n  padding: 3px;\n  width: 30px;\n  height: 30px;\n  margin: 6px;\n  background: black;\n  color: white;\n  border-color: white;\n  border-width: 0px;\n  border-image: none;\n  border-style: solid;\n  color: gray;\n}\n\n.lampboard-letter.active {\n  color: #FC0;\n  text-shadow: #FC0 2px 0px 3px;\n}\n\n.lampboard-letter:focus {\n  outline: none;\n}\n\n#lampboard-row-1 {\n  margin-left: 10px;\n}\n\n#lampboard-row-2 {\n  margin-left: 26px;\n}\n\n#lampboard {\n  margin-bottom: 20px;\n}\n\n.keyboard-button:active {\n  top: 3px;\n  left: 2px;\n  position: relative;\n}\n\n.keyboard-button:focus {\n  outline: none;\n}\n\n.keyboard-button {\n  border-radius: 20px;\n  padding: 3px;\n  width: 32px;\n  height: 32px;\n  margin: 5px;\n  background: black;\n  color: white;\n  border-color: white;\n  border-width: 2px;\n  box-shadow: 4px -2px 1px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19) !important;\n  border-image: none;\n  border-style: solid;\n}\n\n.keyboard-row {\n  border-top: 2px solid black;\n  padding-top: 5px;\n  padding-bottom: 5px;\n}\n\n#keyboard-row-1 {\n  padding-left: 10px;\n}\n\n#keyboard-row-2 {\n  padding-left: 26px;\n}\n'],sourceRoot:""}]);const a=A},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var A=this[i][0];null!=A&&(o[A]=!0)}for(var a=0;a<n.length;a++){var d=[].concat(n[a]);r&&o[d[0]]||(t&&(d[2]?d[2]="".concat(t," and ").concat(d[2]):d[2]=t),e.push(d))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,o=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var t=[],r=!0,o=!1,i=void 0;try{for(var A,a=n[Symbol.iterator]();!(r=(A=a.next()).done)&&(t.push(A.value),!e||t.length!==e);r=!0);}catch(n){o=!0,i=n}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return t}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],A=o[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(A)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),c="/*# ".concat(d," */"),l=A.sources.map((function(n){return"/*# sourceURL=".concat(A.sourceRoot||"").concat(n," */")}));return[i].concat(l).concat([c]).join("\n")}return[i].join("\n")}},379:(n,e,t)=>{var r,o=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),i=[];function A(n){for(var e=-1,t=0;t<i.length;t++)if(i[t].identifier===n){e=t;break}return e}function a(n,e){for(var t={},r=[],o=0;o<n.length;o++){var a=n[o],d=e.base?a[0]+e.base:a[0],c=t[d]||0,l="".concat(d," ").concat(c);t[d]=c+1;var s=A(l),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==s?(i[s].references++,i[s].updater(p)):i.push({identifier:l,updater:C(p,e),references:1}),r.push(l)}return r}function d(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var A=o(n.insert||"head");if(!A)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");A.appendChild(e)}return e}var c,l=(c=[],function(n,e){return c[n]=e,c.filter(Boolean).join("\n")});function s(n,e,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=l(e,o);else{var i=document.createTextNode(o),A=n.childNodes;A[e]&&n.removeChild(A[e]),A.length?n.insertBefore(i,A[e]):n.appendChild(i)}}function p(n,e,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var u=null,f=0;function C(n,e){var t,r,o;if(e.singleton){var i=f++;t=u||(u=d(e)),r=s.bind(null,t,i,!1),o=s.bind(null,t,i,!0)}else t=d(e),r=p.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=a(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var o=A(t[r]);i[o].references--}for(var d=a(n,e),c=0;c<t.length;c++){var l=A(t[c]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}t=d}}}}},e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{function n(n){return n.toUpperCase().charCodeAt()-65}function e(n){return String.fromCharCode(n+65)}class r{constructor(e,t){this.wiring=e,this.turnoverIndex=n(t),this.currentIndex=0}rotate(){let n=this.currentIndex==this.turnoverIndex;return this.turnUp(),n}turnUp(){this.currentIndex=this.moduloAlphabet(this.currentIndex+1)}turnDown(){this.currentIndex=this.moduloAlphabet(this.currentIndex-1)}getCurrentLetter(){return e(this.currentIndex)}encode(t){var r=n(t),o=n(this.wiring[this.moduloAlphabet(r+this.currentIndex)]);return e(this.moduloAlphabet(o-this.currentIndex))}decode(t){var r=n(t),o=this.wiring.indexOf(e(this.moduloAlphabet(r+this.currentIndex)));return e(this.moduloAlphabet(o-this.currentIndex))}moduloAlphabet(n){return(n+26)%26}}class o{constructor(n){this.rotors=n}encode(n){return this.rotors.forEach((e=>{n=e.encode(n)})),n}decode(n){return this.rotors.slice().reverse().forEach((e=>{n=e.decode(n)})),n}rotate(){let n=!0;for(let e=0;e<this.rotors.length&&n;e++)n=this.rotors[e].rotate()}}class i{constructor(n){this.wiring=n}reflect(e){return this.wiring[n(e)]}}class A{constructor(n){if(!Array.isArray(n))throw"Please pass an array of strings to plugboard";if(new Set(n.join()).size!==n.join().length)throw"Plugboard socket used twice";this.pairs=n}map(n){const e=this.pairs.find((e=>e.includes(n)));return e?e.replace(n,"")[0]:n}}class a{static buildDefault(){let n=new r("BDFHJLCPRTXVZNYEIWGAKMUSQO","V"),e=new r("AJDKSIRUXBLHWTMCQGZNPYFVOE","E"),t=new r("EKMFLGDQVZNTOWYHXUSPAIBRCJ","Q"),d=new o([n,e,t]),c=new A(["AB"]),l=new i("YRUHQSLDPXNGOKMIEBFZCWVJAT");return new a(d,c,l)}constructor(n,e,t){this.rotorSet=n,this.plugboard=e,this.reflector=t}write(n){return this.rotorSet.rotate(),this.encode(n)}encode(n){return n=this.plugboard.map(n),n=this.rotorSet.encode(n),n=this.reflector.reflect(n),n=this.rotorSet.decode(n),this.plugboard.map(n)}}var d=t(379),c=t.n(d),l=t(769);c()(l.Z,{insert:"head",singleton:!1}),l.Z.locals;const s=a.buildDefault();function p(){const n=document.querySelector(".lampboard-letter.active");n&&n.classList.remove("active")}function u(n){document.getElementById("enigma-output-text").innerHTML+=n}function f(){const n=s.rotorSet.rotors,e=Array.from(document.querySelectorAll(".rotor-window")).reverse();for(let t=0;t<n.length;t++)e[t].innerText=n[t].getCurrentLetter()}function C(n){const e=s.write(n);!function(n){Array.from(document.querySelectorAll(".lampboard-letter")).find((e=>e.innerText===n)).classList.add("active")}(e),u(e),f()}document.querySelectorAll(".keyboard-button").forEach((n=>{n.addEventListener("mousedown",(n=>{C(n.target.innerText),n.target.blur()}))})),document.addEventListener("mouseup",(n=>{p()})),document.addEventListener("keydown",(n=>{if(n.repeat)return;if("Space"===n.code)return void u("&nbsp;");const e=n.key.toUpperCase();1===e.length&&e.charCodeAt()>=65&&e.charCodeAt()<=90&&C(e)})),document.addEventListener("keyup",(n=>{p()})),document.querySelectorAll(".rotor-knob-up").forEach((n=>{n.addEventListener("click",(n=>{!function(n){const e=Array.from(document.querySelectorAll(".rotor-knob-up")).reverse().indexOf(n);s.rotorSet.rotors[e].turnUp(),f()}(n.target),n.target.blur()}))})),document.querySelectorAll(".rotor-knob-down").forEach((n=>{n.addEventListener("click",(n=>{!function(n){const e=Array.from(document.querySelectorAll(".rotor-knob-down")).reverse().indexOf(n);s.rotorSet.rotors[e].turnDown(),f()}(n.target),n.target.blur()}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,